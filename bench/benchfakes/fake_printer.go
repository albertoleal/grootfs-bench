// This file was generated by counterfeiter
package benchfakes

import (
	"sync"

	"code.cloudfoundry.org/grootfs-bench/bench"
)

type FakePrinter struct {
	PrintStub        func(summary bench.Summary) []byte
	printMutex       sync.RWMutex
	printArgsForCall []struct {
		summary bench.Summary
	}
	printReturns struct {
		result1 []byte
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePrinter) Print(summary bench.Summary) []byte {
	fake.printMutex.Lock()
	fake.printArgsForCall = append(fake.printArgsForCall, struct {
		summary bench.Summary
	}{summary})
	fake.recordInvocation("Print", []interface{}{summary})
	fake.printMutex.Unlock()
	if fake.PrintStub != nil {
		return fake.PrintStub(summary)
	} else {
		return fake.printReturns.result1
	}
}

func (fake *FakePrinter) PrintCallCount() int {
	fake.printMutex.RLock()
	defer fake.printMutex.RUnlock()
	return len(fake.printArgsForCall)
}

func (fake *FakePrinter) PrintArgsForCall(i int) bench.Summary {
	fake.printMutex.RLock()
	defer fake.printMutex.RUnlock()
	return fake.printArgsForCall[i].summary
}

func (fake *FakePrinter) PrintReturns(result1 []byte) {
	fake.PrintStub = nil
	fake.printReturns = struct {
		result1 []byte
	}{result1}
}

func (fake *FakePrinter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.printMutex.RLock()
	defer fake.printMutex.RUnlock()
	return fake.invocations
}

func (fake *FakePrinter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ bench.Printer = new(FakePrinter)
